AWSTemplateFormatVersion: '2010-09-09'
Description: 'WMS Backend Services Stack with Lambda Functions only'

Parameters:
  EnvironmentType:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment type

Resources:
  # 문서 처리 Lambda 함수
  DocumentServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "wms-document-service-${EnvironmentType}"
      Runtime: python3.9
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !ImportValue 'wms-storage-stack-DeploymentBucketName'
        S3Key: !Sub "${EnvironmentType}/document-service/deployment-package.zip"
      Environment:
        Variables:
          DOCUMENT_BUCKET: !ImportValue 'wms-storage-stack-DocumentBucketName'
          METADATA_TABLE: !ImportValue 'wms-storage-stack-DocumentMetadataTableName'

  # 빈 관리 Lambda 함수
  BinServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "wms-bin-service-${EnvironmentType}"
      Runtime: python3.9
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !ImportValue 'wms-storage-stack-DeploymentBucketName'
        S3Key: !Sub "${EnvironmentType}/bin-service/deployment-package.zip"
      Environment:
        Variables:
          BIN_LOCATION_TABLE: !ImportValue 'wms-storage-stack-BinLocationTableName'
          INVENTORY_TABLE: !ImportValue 'wms-storage-stack-InventoryTableName'

  # 입고 관리 Lambda 함수 (추가)
  ReceivingOrderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "wms-receiving-order-service-${EnvironmentType}"
      Runtime: python3.9
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !ImportValue 'wms-storage-stack-DeploymentBucketName'
        S3Key: !Sub "${EnvironmentType}/receiving-order-service/deployment-package.zip"
      Environment:
        Variables:
          RECEIVING_ORDER_TABLE: !ImportValue 'wms-storage-stack-ReceivingOrderTableName'
          RECEIVING_HISTORY_TABLE: !ImportValue 'wms-storage-stack-ReceivingHistoryTableName'
          INVENTORY_TABLE: !ImportValue 'wms-storage-stack-InventoryTableName'
          DOCUMENT_BUCKET: !ImportValue 'wms-storage-stack-DocumentBucketName'

  # Lambda 실행 역할
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # Lambda 권한 (기존 API Gateway에서 Lambda 호출 허용)
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ReceivingOrderFunction.Arn
      Principal: apigateway.amazonaws.com
      # API Gateway ARN을 와일드카드로 설정하여 모든 API Gateway에서 호출 허용
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*"

Outputs:
  DocumentServiceFunctionArn:
    Description: ARN of the Document Service Lambda Function
    Value: !GetAtt DocumentServiceFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DocumentServiceFunctionArn"

  BinServiceFunctionArn:
    Description: ARN of the Bin Service Lambda Function
    Value: !GetAtt BinServiceFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BinServiceFunctionArn"

  ReceivingOrderFunctionArn:
    Description: ARN of the Receiving Order Service Lambda Function
    Value: !GetAtt ReceivingOrderFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ReceivingOrderFunctionArn"