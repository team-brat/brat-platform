AWSTemplateFormatVersion: '2010-09-09'
Description: 'WMS Backend Services Stack - Simplified'

Parameters:
  EnvironmentType:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment type

Resources:
  # ------ IAM 역할 정의 ------
  # Lambda 실행 역할 (이벤트 권한 추가)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess

  # ------ Lambda 함수 정의 ------
  # 입고 주문 Lambda 함수 (주요 기능)
  ReceivingOrderFunction:
  Type: AWS::Lambda::Function
  Properties:
    FunctionName: !Sub "wms-receiving-order-service-${EnvironmentType}"
    Runtime: python3.9
    Handler: index.handler
    Role: !GetAtt LambdaExecutionRole.Arn
    Timeout: 30
    MemorySize: 256
    Code:
      ZipFile: |
        def lambda_handler(event, context):
            return {
                'statusCode': 200,
                'body': 'Temporary function - will be updated with actual code via CI/CD pipeline.'
            }
    Environment:
      Variables:
        RECEIVING_ORDER_TABLE: !ImportValue 'wms-storage-stack-ReceivingOrderTableName'
        RECEIVING_HISTORY_TABLE: !ImportValue 'wms-storage-stack-ReceivingHistoryTableName'
        RECEIVING_ITEM_TABLE: !ImportValue 'wms-storage-stack-ReceivingItemTableName'
        DOCUMENT_METADATA_TABLE: !ImportValue 'wms-storage-stack-DocumentMetadataTableName'
        DOCUMENT_BUCKET: !ImportValue 'wms-storage-stack-DocumentBucketName'

  # ------ EventBridge 규칙 정의 ------
  # 주문 생성 이벤트 규칙
  OrderCreatedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "wms-order-created-rule-${EnvironmentType}"
      Description: "Route OrderCreated events"
      EventPattern:
        source:
          - "wms.receiving-service"
        detail-type:
          - "OrderCreated"
      State: ENABLED
      # 타겟은 현재 없으므로 빈 배열로 설정
      Targets: []

  # ------ API Gateway 정의 ------
  # API Gateway REST API
  WMSAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "wms-api-${EnvironmentType}"
      Description: WMS API for receiving order management
      EndpointConfiguration:
        Types:
          - REGIONAL

  # ------ API Gateway 리소스 정의 (최상위 경로) ------
  # 입고 주문 리소스
  ReceivingOrdersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WMSAPI
      ParentId: !GetAtt WMSAPI.RootResourceId
      PathPart: "receiving-orders"

  # ------ API Gateway 메서드 정의 ------
  # 입고 주문 리소스 메서드
  ReceivingOrdersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrdersResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReceivingOrderFunction.Arn}/invocations"

  ReceivingOrdersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrdersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReceivingOrderFunction.Arn}/invocations"

  ReceivingOrdersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrdersResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # ------ Lambda 권한 부여 ------
  # Lambda 함수에 API Gateway 권한 부여
  ReceivingOrderPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ReceivingOrderFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WMSAPI}/*"

  # ------ API Gateway 배포 ------
  # API Gateway 배포 및 스테이지 생성
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ReceivingOrdersGetMethod
      - ReceivingOrdersPostMethod
      - ReceivingOrdersOptionsMethod
    Properties:
      RestApiId: !Ref WMSAPI
      StageName: !Ref EnvironmentType

Outputs:
  ApiEndpoint:
    Description: URL of the API Gateway endpoint
    Value: !Sub "https://${WMSAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentType}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
      
  ReceivingOrderFunctionArn:
    Description: ARN of the Receiving Order Lambda function
    Value: !GetAtt ReceivingOrderFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ReceivingOrderFunctionArn"