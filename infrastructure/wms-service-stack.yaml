AWSTemplateFormatVersion: '2010-09-09'
Description: 'WMS Backend Services Stack'

Parameters:
  EnvironmentType:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment type

Resources:
  # 문서 처리 Lambda 함수
  DocumentServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "wms-document-service-${EnvironmentType}"
      Runtime: python3.9
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !ImportValue 'wms-storage-stack-DeploymentBucketName'
        S3Key: !Sub "${EnvironmentType}/document-service/deployment-package.zip"
      Environment:
        Variables:
          DOCUMENT_BUCKET: !ImportValue 'wms-storage-stack-DocumentBucketName'
          METADATA_TABLE: !ImportValue 'wms-storage-stack-DocumentMetadataTableName'

  # 빈 관리 Lambda 함수
  BinServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "wms-bin-service-${EnvironmentType}"
      Runtime: python3.9
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !ImportValue 'wms-storage-stack-DeploymentBucketName'
        S3Key: !Sub "${EnvironmentType}/bin-service/deployment-package.zip"
      Environment:
        Variables:
          BIN_LOCATION_TABLE: !ImportValue 'wms-storage-stack-BinLocationTableName'
          INVENTORY_TABLE: !ImportValue 'wms-storage-stack-InventoryTableName'

  # 입고 관리 Lambda 함수 (추가)
  ReceivingOrderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "wms-receiving-order-service-${EnvironmentType}"
      Runtime: python3.9
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !ImportValue 'wms-storage-stack-DeploymentBucketName'
        S3Key: !Sub "${EnvironmentType}/receiving-order-service/deployment-package.zip"
      Environment:
        Variables:
          RECEIVING_ORDER_TABLE: !ImportValue 'wms-storage-stack-ReceivingOrderTableName'
          RECEIVING_HISTORY_TABLE: !ImportValue 'wms-storage-stack-ReceivingHistoryTableName'
          INVENTORY_TABLE: !ImportValue 'wms-storage-stack-InventoryTableName'
          DOCUMENT_BUCKET: !ImportValue 'wms-storage-stack-DocumentBucketName'

  # Lambda 실행 역할
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # API Gateway REST API
  WMSAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "wms-api-${EnvironmentType}"
      Description: WMS API for document, bin, and receiving order management
      EndpointConfiguration:
        Types:
          - REGIONAL

  # 문서 리소스 및 메서드
  DocumentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WMSAPI
      ParentId: !GetAtt WMSAPI.RootResourceId
      PathPart: "documents"

  DocumentsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref DocumentsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentServiceFunction.Arn}/invocations"

  DocumentsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref DocumentsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentServiceFunction.Arn}/invocations"

  DocumentsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref DocumentsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # 문서 ID 리소스 및 메서드
  DocumentIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WMSAPI
      ParentId: !Ref DocumentsResource
      PathPart: "{document_id}"

  DocumentIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref DocumentIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentServiceFunction.Arn}/invocations"

  DocumentIdDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref DocumentIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentServiceFunction.Arn}/invocations"

  # 입고 주문 리소스 및 메서드 (추가)
  ReceivingOrdersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WMSAPI
      ParentId: !GetAtt WMSAPI.RootResourceId
      PathPart: "receiving-orders"

  ReceivingOrdersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrdersResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReceivingOrderFunction.Arn}/invocations"

  ReceivingOrdersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrdersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReceivingOrderFunction.Arn}/invocations"

  ReceivingOrdersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrdersResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # 입고 주문 ID 리소스 및 메서드 (추가)
  ReceivingOrderIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WMSAPI
      ParentId: !Ref ReceivingOrdersResource
      PathPart: "{order_id}"

  ReceivingOrderIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrderIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReceivingOrderFunction.Arn}/invocations"

  ReceivingOrderIdPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrderIdResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReceivingOrderFunction.Arn}/invocations"

  ReceivingOrderIdDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrderIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReceivingOrderFunction.Arn}/invocations"

  ReceivingOrderIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceivingOrderIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # 입고 처리 리소스 및 메서드 (추가)
  ReceiveActionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WMSAPI
      ParentId: !Ref ReceivingOrderIdResource
      PathPart: "receive"

  ReceiveActionPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceiveActionResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReceivingOrderFunction.Arn}/invocations"

  ReceiveActionOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WMSAPI
      ResourceId: !Ref ReceiveActionResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway 배포
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - DocumentsGetMethod
      - DocumentsPostMethod
      - DocumentIdGetMethod
      - DocumentIdDeleteMethod
      - ReceivingOrdersGetMethod
      - ReceivingOrdersPostMethod
      - ReceivingOrderIdGetMethod
      - ReceivingOrderIdPutMethod
      - ReceivingOrderIdDeleteMethod
      - ReceiveActionPostMethod
    Properties:
      RestApiId: !Ref WMSAPI
      StageName: !Ref EnvironmentType

  # Lambda 함수에 API Gateway 권한 부여
  DocumentServicePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DocumentServiceFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WMSAPI}/*"

  BinServicePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BinServiceFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WMSAPI}/*"

  ReceivingOrderPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ReceivingOrderFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WMSAPI}/*"

Outputs:
  DocumentServiceFunctionArn:
    Description: ARN of the Document Service Lambda Function
    Value: !GetAtt DocumentServiceFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DocumentServiceFunctionArn"

  BinServiceFunctionArn:
    Description: ARN of the Bin Service Lambda Function
    Value: !GetAtt BinServiceFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BinServiceFunctionArn"

  ReceivingOrderFunctionArn:
    Description: ARN of the Receiving Order Service Lambda Function
    Value: !GetAtt ReceivingOrderFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ReceivingOrderFunctionArn"

  ApiEndpoint:
    Description: URL of the WMS API
    Value: !Sub "https://${WMSAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentType}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"